// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../src/app/generated/prisma"
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  email            String            @unique
  password         String
  name             String
  role             Role              @default(CUSTOMER)
  address          String?
  bankDetails      BankDetails?
  crops            Crop[]
  orders           Order[]
  deliveries       Delivery[]
  deliveryRequests DeliveryRequest[] @relation("driverRequests")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

enum Role {
  CUSTOMER
  FARMER
  DRIVER
  ADMIN
}

model BankDetails {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  accountName String
  accountNumber String
  bankName    String
  branch      String?
  userId      String  @unique @db.ObjectId
  user        User    @relation(fields: [userId], references: [id])
}

enum CropCategory {
  vegetables
  fruits
  grains
  legumes
}

model Crop {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  category         CropCategory
  pricePerUnit     Float
  availableQuantity Float
  unit             String
  harvestDate      DateTime
  location         String
  imageUrl         String?
  farmerId         String   @db.ObjectId
  farmer           User     @relation(fields: [farmerId], references: [id])
  orders           Order[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Order {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity       Float
  totalPrice     Float
  adminPayment   Float    // 5% of total price
  driverPayment  Float    // No longer used - drivers use customFee instead
  farmerPayment  Float    // 95% of total price
  status         OrderStatus @default(PENDING_PAYMENT)
  deliveryAddress String
  paymentProof   String?
  buyerId        String   @db.ObjectId
  buyer          User     @relation(fields: [buyerId], references: [id])
  cropId         String   @db.ObjectId
  crop           Crop     @relation(fields: [cropId], references: [id])
  delivery       Delivery?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum OrderStatus {
  PENDING_PAYMENT
  PAYMENT_RECEIVED
  READY_FOR_DELIVERY
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

model Delivery {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  status      DeliveryStatus @default(PENDING)
  pickupDate  DateTime?
  deliveryDate DateTime?
  driverId    String?  @db.ObjectId
  driver      User?    @relation(fields: [driverId], references: [id])
  orderId     String   @unique @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requests    DeliveryRequest[]
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

model DeliveryRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  deliveryId  String   @db.ObjectId
  delivery    Delivery @relation(fields: [deliveryId], references: [id])
  driverId    String   @db.ObjectId
  driver      User     @relation(fields: [driverId], references: [id], name: "driverRequests")
  customFee   Float    // The fee proposed by the driver
  message     String?  // Optional message from the driver
  status      DeliveryRequestStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum DeliveryRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}